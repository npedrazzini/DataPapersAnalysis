# -*- coding: utf-8 -*-
"""johd_rdjhss_graphs_from_CompetitorData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JGjcyg4AjI-VbXBCVYtrLpPjDCguIgTr
"""

#Importing the libraries needed
import matplotlib.pyplot as plt
plt.style.use('ggplot')
import pandas as pd
from collections import Counter
import numpy as np

from google.colab import files
uploaded = files.upload()

df = pd.read_csv("RDJ_JOHD_CompetitorData.xlsx - Data_JOHD_RDJ (2).csv")
df

"""# JOHD & RDJHSS TIMELINE"""

#setting a year range for plotting publications along the years
yearrange = range (2015,2023)

def journaltrend(n_pub):
  journalname = df[df['journal/repository'] == n_pub] #selects the specific journal
  journalyearnum = journalname['Year'].value_counts(sort=False) #counts the number of releases in that year

  journalyearslist = list(journalname['Year']) #list of all years involved
  journalyearslist2 = sorted(list(dict.fromkeys(journalyearslist))) #order the list and removes duplicates using a dictionary

#creates a dictionary that associates each year with the number of releases
  journal_zip_iterator = zip(journalyearslist2, journalyearnum)
  journal_dictionary = dict(journal_zip_iterator)

#the dictionary called 'journal_dictionary' contains only the years where a publication belonging to the selected journal was released,
#in case of missing years (although it's unlikely to happen) here is a code that generates a dictionary full of zeros as replacement:

  allyears = list(yearrange) #list containing all years 

#creates a list containg a '0' for each year in yearrange
  zerolist = []
  for element in yearrange:
    zerolist.append(0)

#creates a dictionary that associates each year with a '0'
  allyears_zip_iterator = zip(allyears, zerolist)
  allyears_dictionary = dict(allyears_zip_iterator)

#updates the dictionary with the missing years
  fixed_journal = allyears_dictionary.copy()
  fixed_journal.update(journal_dictionary)

  return(fixed_journal)

plt.figure(figsize=(10,5))
plt.title ("JOHD - Publications per year", fontsize=15)
plt.plot(list(journaltrend('JOHD').keys()),list(journaltrend('JOHD').values()),color='blue')

plt.figure(figsize=(10,5))
plt.title ("RDJHSS - Publications per year", fontsize=15)
plt.plot(list(journaltrend('RDJ').keys()),list(journaltrend('RDJ').values()),color='orange')

plt.figure(figsize=(10,5))
plt.title ("JOHD & RDJHSS - Publications per year", fontsize=15)
plt.plot(list(journaltrend('JOHD').keys()),list(journaltrend('JOHD').values()),color='blue', label="JOHD")
plt.plot(list(journaltrend('RDJ').keys()),list(journaltrend('RDJ').values()),color='orange', label= "RDJHSS")
plt.xlabel("Year")
plt.ylabel("Number of Publications")
plt.legend()

"""# JOHD"""

#creating a new DataFrame and keeping only certain columns from the previous one
new = df[['journal/repository', 'Year', 'field', 'paper type']].copy()
# the .loc function helps us to retrieve data values from a dataset at an ease. Using the loc() function, we can access the data values fitted in the particular row or column   
johd_pub = new.loc[df['journal/repository']=="JOHD"]
rdj_pub = new.loc[df['journal/repository']=="RDJ"]

#creating another Dataframe with JOHD info regarding the most present fields in data papers
johd_pub_field = johd_pub.loc[df['paper type']=="Data Paper"] 
print(johd_pub_field)

#counting how many times each field is mentioned in the dataframe and plotting the  barchart 
x1 = johd_pub_field.groupby('field').count()


x1 = x1.sort_values(by ="paper type")
plt.figure(figsize=(10, 5))
x1.plot(y = 'paper type', kind="bar", color=['#5e60ce'], width = 0.8)

plt.title("JOHD - Number of publications by field, data papers")
plt.xlabel("Field")
plt.ylabel("Number of Publications")
plt.legend(['Data Paper'])
plt.show()

#creating another Dataframe with JOHD info regarding the most present fields in research papers
johd_pub_field_research = johd_pub.loc[df['paper type']=="Research Paper"] 
print(johd_pub_field_research)

#counting how many times each field is mentioned in the dataframe and plotting the  barchart
x2 = johd_pub_field_research.groupby('field').count()


x2 = x2.sort_values(by ="paper type")
plt.figure(figsize=(10, 5))
x2.plot(y = 'paper type', kind="bar", color=['#a3c4f3'], width = 0.8)

plt.title("JOHD - Number of publications by field, research papers")
plt.xlabel("Field")
plt.ylabel("Number of Publications")
plt.legend(['Research Paper'])
plt.show()

"""## RDJHSS"""

#creating another Dataframe with RDJHSS info regarding the most present fields in data papers
rdj_pub_field = rdj_pub.loc[df['paper type']=="Data Paper"]
print(rdj_pub_field)

#counting how many times each field is mentioned in the dataframe and plotting the  barchart
x3 = rdj_pub_field.groupby('field').count()


x3 = x3.sort_values(by ="paper type")
plt.figure(figsize=(10, 5))
x3.plot(y = 'paper type', kind="bar", color=['#ffb703'], width = 0.8)

plt.title("RDJHSS- Number of publications by field, data papers")
plt.xlabel("Field")
plt.ylabel("Number of Publications")
plt.legend(['Data Paper'])
plt.show()

"""# JOHD & RDJHSS FIELD - STACKED BARPLOT

"""

#Comparing research fields of publications (data papers and research papers) in both JOHD and RDJ
df2 = new.groupby(['field','journal/repository'])['field'].count().unstack('journal/repository').fillna(0)
df2 = df2.sort_values(by= "JOHD")

df2[['JOHD','RDJ']].plot(kind='bar', stacked=True, color=['#5e60ce', "#ffb703"], width = 0.8)

plt.rcParams["figure.figsize"] = (10,5)
plt.title("JOHD & RDJHSS - Number of publications by field")
plt.xlabel("Field")
plt.ylabel("Number of Publications")
plt.legend(['JOHD', 'RDJHSS'])
plt.show()